<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptBg" xml:space="preserve">
    <value>Accepting this means accepting purchase order Terms and Conditions included in this purchase order, including any annex. (Ex. Drawings, special requirements, specifications, contractual terms) if any</value>
  </data>
  <data name="BankConnection" xml:space="preserve">
    <value>Bank Connection</value>
  </data>
  <data name="BgOrderNrInfo" xml:space="preserve">
    <value>This order number must appear on bills or any other documents related to the order.</value>
  </data>
  <data name="ByInvoice" xml:space="preserve">
    <value>By Invoice</value>
  </data>
  <data name="ConfirmInfo" xml:space="preserve">
    <value>Please, be so kind and confirm obtaining of this order within 5 days as the latest. If you fail to reply by then we will consider this orders as confirmed.</value>
  </data>
  <data name="ContactPerson" xml:space="preserve">
    <value>Contact Person</value>
  </data>
  <data name="ContractNr" xml:space="preserve">
    <value>Contract Nr.</value>
  </data>
  <data name="DateFrom" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DeliverTo" xml:space="preserve">
    <value>Deliver to</value>
  </data>
  <data name="DeliveryDate" xml:space="preserve">
    <value>Delivery Date</value>
  </data>
  <data name="Descriptions" xml:space="preserve">
    <value>Descriptions</value>
  </data>
  <data name="EInvoiceInfo" xml:space="preserve">
    <value>Send electronic invoices to {0}.</value>
  </data>
  <data name="Generated" xml:space="preserve">
    <value>Generated</value>
  </data>
  <data name="Important" xml:space="preserve">
    <value>Important</value>
  </data>
  <data name="IntegralPart" xml:space="preserve">
    <value>An integral part of the order is the General Purchase Terms.</value>
  </data>
  <data name="IntegralPartBV" xml:space="preserve">
    <value>An integral part of the order are the General Purchase Terms and &lt;a href=https://www.utc.com/-/media/project/united-technologies/utc/files/code-of-conduct/english.pdf?rev=2040272be4514dc8ae1a9d6a3f922c5a&gt;Supplier Code of Conduct&lt;/a&gt;</value>
  </data>
  <data name="LeadTime" xml:space="preserve">
    <value>Lead Time</value>
  </data>
  <data name="Mail" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="OrderConfirmation" xml:space="preserve">
    <value>Order Confirmation</value>
  </data>
  <data name="OrderDate" xml:space="preserve">
    <value>Order Date</value>
  </data>
  <data name="OrderDetails" xml:space="preserve">
    <value>We are ordering</value>
  </data>
  <data name="OrderedBy" xml:space="preserve">
    <value>Ordered By</value>
  </data>
  <data name="Orderer" xml:space="preserve">
    <value>Orderer</value>
  </data>
  <data name="OrderNr" xml:space="preserve">
    <value>Order Number</value>
  </data>
  <data name="OrderNrInfo" xml:space="preserve">
    <value>Use our order number as a reference number on each documents and correspondence.</value>
  </data>
  <data name="OrderNrInfoZona" xml:space="preserve">
    <value>Use our order number as a reference number on each documents and correspondence. Invoice without the reference of order number will be not paid! INVOICE HAS TO BE AVAILABLE WITH THE DELIVERY.</value>
  </data>
  <data name="OurResponsiblePerson" xml:space="preserve">
    <value>Contact Person</value>
  </data>
  <data name="Page" xml:space="preserve">
    <value>Page</value>
  </data>
  <data name="PhoneNr" xml:space="preserve">
    <value>Phone Nr.</value>
  </data>
  <data name="PricePerUnit" xml:space="preserve">
    <value>Price Per Unit (wo VAT)</value>
  </data>
  <data name="PurchaseOrder" xml:space="preserve">
    <value>Purchase Order</value>
  </data>
  <data name="PurchaseOrderNr" xml:space="preserve">
    <value>Purchase Order No.</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Registration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="SendInvoiceTo" xml:space="preserve">
    <value>Send Invoice To</value>
  </data>
  <data name="SignatureBuyer" xml:space="preserve">
    <value>Signature and Stamp Buyer</value>
  </data>
  <data name="SignatureCustomer" xml:space="preserve">
    <value>Signature and Stamp Customer (Order Acceptance)</value>
  </data>
  <data name="SpecialInstructions" xml:space="preserve">
    <value>Special Instructions</value>
  </data>
  <data name="SrNr" xml:space="preserve">
    <value>Sr. No.</value>
  </data>
  <data name="Supplier" xml:space="preserve">
    <value>Supplier</value>
  </data>
  <data name="SupplierId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="TermsOfPayment" xml:space="preserve">
    <value>Terms of Payment</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TotalPrice" xml:space="preserve">
    <value>Total Price</value>
  </data>
  <data name="TotalValue" xml:space="preserve">
    <value>Total Value (wo VAT)</value>
  </data>
  <data name="VatId" xml:space="preserve">
    <value>Vat Id</value>
  </data>
  <data name="VendorContact" xml:space="preserve">
    <value>Vendor Contact</value>
  </data>
  <data name="YourQuote" xml:space="preserve">
    <value>Your Quote</value>
  </data>
</root>